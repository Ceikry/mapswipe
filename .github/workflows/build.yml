name: Build the app for Android and iOS

  # CI for MapSwipe app
  #
  # This runs on each push, and does different things depending on
  # the branch and tags of the current commit.
  #
  # Secrets come from environment variables from github.
  # Files containing secrets are base64 encoded, and their content
  # loaded from a secret env var.

on: [push]

jobs:

  check-syntax:
    name: Validate code format and types before building
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-node@v1
        with:
          node-version: '16.1.0'
      - name: Install javascript dependencies
        uses: bahmutov/npm-install@v1
      - name: Lint the code
        run: yarn lint
      - name: Check typing of code
        run: yarn flow
      - name: Lint JSON translation files
        run: yarn lintJson

  release-android:
    name: Build and release Android app
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-node@v1
        with:
          node-version: '16.1.0'
      - name: Install javascript packages
        uses: bahmutov/npm-install@v1
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: '2.7.3'
      - name: Decode sentry.properties
        env:
          SENTRY_PROPERTIES: ${{ secrets.FILE_SENTRY_PROPERTIES }}
        run: echo "$SENTRY_PROPERTIES" | base64 -d > ./android/sentry.properties
      - name: Decode development google-services.json
        env:
          FILE_ANDROID_GOOGLE_SERVICES_DEV: ${{ secrets.FILE_ANDROID_GOOGLE_SERVICES_DEV }}
        run: echo "$FILE_ANDROID_GOOGLE_SERVICES_DEV" | base64 -d > ./android/app/src/dev/google-services.json
      - name: Decode production google-services.json
        env:
          FILE_ANDROID_GOOGLE_SERVICES_PRODUCTION: ${{ secrets.FILE_ANDROID_GOOGLE_SERVICES_PRODUCTION }}
        run: mkdir -p ./android/app/src/production ; echo "$FILE_ANDROID_GOOGLE_SERVICES_PRODUCTION" | base64 -d > ./android/app/src/production/google-services.json
      - name: Decode the dev release keystore file
        # passwords and secrets used for decrypting this keystore file (in the build step further down)
        # MAPSWIPE_RELEASE_STORE_FILE=mapswipe-dev-release-key.keystore
        # MAPSWIPE_RELEASE_KEY_ALIAS=mapswipe-dev-key-alias
        # MAPSWIPE_RELEASE_STORE_PASSWORD=xxx
        # MAPSWIPE_RELEASE_KEY_PASSWORD=xxx
        # All vars are taken from actions env vars, prefixed with ORG_GRADLE_PROJECT_
        # See https://docs.gradle.org/5.6.4/userguide/build_environment.html#sec:project_properties
        # The keystore file is a binary file, somehow the base64 decoding used for other files does
        # not work well here, so we use gpg symetric encryption instead as recommended by github:
        # https://docs.github.com/en/actions/reference/encrypted-secrets#limits-for-secrets
        env:
          FILE_DECRYPTION_PASSPHRASE: ${{ secrets.FILE_DECRYPTION_PASSPHRASE }}
        run: gpg --quiet --batch --yes --decrypt --passphrase="$FILE_DECRYPTION_PASSPHRASE" --output ./android/app/mapswipe-dev-release-key.keystore ./android/app/mapswipe-dev-release-key.keystore.gpg
      - name: Decode the production release keystore file
        env:
          FILE_DECRYPTION_PASSPHRASE: ${{ secrets.FILE_DECRYPTION_PASSPHRASE }}
        run: gpg --quiet --batch --yes --decrypt --passphrase="$FILE_DECRYPTION_PASSPHRASE" --output ./android/app/mapswipe-production-release-key.keystore ./android/app/mapswipe-production-release-key.keystore.gpg
      - name: Get the tag value from github
        # see https://stackoverflow.com/a/58178121/1138710
        id: vars
        run: echo ::set-output name=tag::${GITHUB_REF#refs/*/}
      - name: Save git version so the app can show it to users
        env:
          # we need this hack because github default env vars don't include the tag itself
          GIT_TAG: ${{ steps.vars.outputs.tag }}
        run: sed -ri "s/COMMIT/$GITHUB_SHA/" debugInfo.json; sed -ri "s/TAG/$GIT_TAG/" debugInfo.json
      - name: Jetify react files
        run: yarn jetifier
      - name: Increase filesystem inotify watch limit
        run: sudo sysctl fs.inotify.max_user_watches=524288
      - name: Build dev APK
        env:
          ORG_GRADLE_PROJECT_MAPSWIPE_RELEASE_KEY_ALIAS: ${{ secrets.ORG_GRADLE_PROJECT_MAPSWIPE_RELEASE_KEY_ALIAS }}
          ORG_GRADLE_PROJECT_MAPSWIPE_RELEASE_KEY_PASSWORD: ${{ secrets.ORG_GRADLE_PROJECT_MAPSWIPE_RELEASE_KEY_PASSWORD }}
          ORG_GRADLE_PROJECT_MAPSWIPE_RELEASE_STORE_FILE: ${{ secrets.ORG_GRADLE_PROJECT_MAPSWIPE_RELEASE_STORE_FILE }}
          ORG_GRADLE_PROJECT_MAPSWIPE_RELEASE_STORE_PASSWORD: ${{ secrets.ORG_GRADLE_PROJECT_MAPSWIPE_RELEASE_STORE_PASSWORD }}
        run: yarn buildDev
      - name: Build production APK
        env:
          ORG_GRADLE_PROJECT_MAPSWIPE_RELEASE_KEY_ALIAS: ${{ secrets.ORG_GRADLE_PROJECT_MAPSWIPE_RELEASE_KEY_ALIAS }}
          ORG_GRADLE_PROJECT_MAPSWIPE_RELEASE_KEY_PASSWORD: ${{ secrets.ORG_GRADLE_PROJECT_MAPSWIPE_RELEASE_KEY_PASSWORD }}
          ORG_GRADLE_PROJECT_MAPSWIPE_RELEASE_STORE_FILE: ${{ secrets.ORG_GRADLE_PROJECT_MAPSWIPE_RELEASE_STORE_FILE }}
          ORG_GRADLE_PROJECT_MAPSWIPE_RELEASE_STORE_PASSWORD: ${{ secrets.ORG_GRADLE_PROJECT_MAPSWIPE_RELEASE_STORE_PASSWORD }}
        run: yarn buildProd

  release-ios:
    name: Build and release iOS app
    runs-on: macOS-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-node@v1
        with:
          node-version: '16.1.0'
      - name: Install javascript packages
        uses: bahmutov/npm-install@v1
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: '2.7.3'
      - name: Install Fastlane
        run: bundle install
      - name: Install cocoapods
        run: gem install xcpretty cocoapods
      - name: Get the tag value from github
        # see https://stackoverflow.com/a/58178121/1138710
        id: vars
        run: echo ::set-output name=tag::${GITHUB_REF#refs/*/}
      - name: Save git version so the app can show it to users
        env:
          GIT_TAG: ${{ steps.vars.outputs.tag }}
        run: sed -i '' "s/COMMIT/$GITHUB_SHA/" debugInfo.json; sed -i '' "s/TAG/$GIT_TAG/" debugInfo.json
      - name: Decode the RSA key for use with ssh
        env:
          FILE_DECRYPTION_PASSPHRASE: ${{ secrets.FILE_DECRYPTION_PASSPHRASE }}
        run: gpg --quiet --batch --yes --decrypt --passphrase="$FILE_DECRYPTION_PASSPHRASE" --output ./ios/cfg/mapswipe.dev_at_gmail_rsa_key_for_travis_ci ./ios/cfg/mapswipe.dev_at_gmail_rsa_key_for_travis_ci.gpg
      - name: Setup keychain and certificates
        run: ./scripts/ios_setup_certificates_for_ci.sh
      - name: Build the app and run unit tests
        # The test lane refreshes the development certificates, compiles the app and launches the unit tests.
        # Actual Tests have been disabled since Travis has issues launching the simulator, but the app is being compiled.
        run: bundle exec fastlane test
