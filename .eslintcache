[{"/home/tahira/Public/mapswipe/src/shared/ConnectionManager.js":"1","/home/tahira/Public/mapswipe/src/shared/Database.js":"2","/home/tahira/Public/mapswipe/src/shared/Globals.js":"3","/home/tahira/Public/mapswipe/src/shared/Levels.js":"4","/home/tahira/Public/mapswipe/src/shared/Main.js":"5","/home/tahira/Public/mapswipe/src/shared/actions/index.js":"6","/home/tahira/Public/mapswipe/src/shared/common/BottomProgress.js":"7","/home/tahira/Public/mapswipe/src/shared/common/ConfirmationModal.js":"8","/home/tahira/Public/mapswipe/src/shared/common/ProfileConversion.js":"9","/home/tahira/Public/mapswipe/src/shared/common/ProjectLevelScreen.js":"10","/home/tahira/Public/mapswipe/src/shared/common/SatImage.js":"11","/home/tahira/Public/mapswipe/src/shared/common/ScaleBar.js":"12","/home/tahira/Public/mapswipe/src/shared/common/Tutorial/index.js":"13","/home/tahira/Public/mapswipe/src/shared/common/firebaseFunctions.js":"14","/home/tahira/Public/mapswipe/src/shared/constants.js":"15","/home/tahira/Public/mapswipe/src/shared/flow-types.js":"16","/home/tahira/Public/mapswipe/src/shared/i18n.js":"17","/home/tahira/Public/mapswipe/src/shared/reducers/index.js":"18","/home/tahira/Public/mapswipe/src/shared/reducers/results.js":"19","/home/tahira/Public/mapswipe/src/shared/reducers/ui.js":"20","/home/tahira/Public/mapswipe/src/shared/store.js":"21","/home/tahira/Public/mapswipe/src/shared/views/AppLoadingScreen.js":"22","/home/tahira/Public/mapswipe/src/shared/views/BuildingFootprint/FootprintDisplay.js":"23","/home/tahira/Public/mapswipe/src/shared/views/BuildingFootprint/Validator.js":"24","/home/tahira/Public/mapswipe/src/shared/views/BuildingFootprint/index.js":"25","/home/tahira/Public/mapswipe/src/shared/views/ChangeDetection/ChangeDetector.js":"26","/home/tahira/Public/mapswipe/src/shared/views/ChangeDetection/index.js":"27","/home/tahira/Public/mapswipe/src/shared/views/Header.js":"28","/home/tahira/Public/mapswipe/src/shared/views/LoadMore.js":"29","/home/tahira/Public/mapswipe/src/shared/views/LoadingIcon.js":"30","/home/tahira/Public/mapswipe/src/shared/views/Login.js":"31","/home/tahira/Public/mapswipe/src/shared/views/Mapper/CardBody.js":"32","/home/tahira/Public/mapswipe/src/shared/views/Mapper/IndividualCard.js":"33","/home/tahira/Public/mapswipe/src/shared/views/Mapper/Tile.js":"34","/home/tahira/Public/mapswipe/src/shared/views/Mapper/index.js":"35","/home/tahira/Public/mapswipe/src/shared/views/MoreOptions.js":"36","/home/tahira/Public/mapswipe/src/shared/views/ProjectCard.js":"37","/home/tahira/Public/mapswipe/src/shared/views/ProjectNav.js":"38","/home/tahira/Public/mapswipe/src/shared/views/ProjectView.js":"39","/home/tahira/Public/mapswipe/src/shared/views/RecommendedCards.js":"40","/home/tahira/Public/mapswipe/src/shared/views/WebviewWindow.js":"41","/home/tahira/Public/mapswipe/src/shared/views/Welcome.js":"42","/home/tahira/Public/mapswipe/__tests__/common/Database.js":"43","/home/tahira/Public/mapswipe/__tests__/common/Login.js":"44","/home/tahira/Public/mapswipe/__tests__/common/RecommendedCards.js":"45","/home/tahira/Public/mapswipe/__tests__/common/reducers.js":"46","/home/tahira/Public/mapswipe/__tests__/fixtures/projects.js":"47"},{"size":800,"mtime":1587042614670,"results":"48","hashOfConfig":"49"},{"size":5464,"mtime":1587042614670,"results":"50","hashOfConfig":"49"},{"size":1191,"mtime":1587478132427,"results":"51","hashOfConfig":"49"},{"size":9959,"mtime":1587042614670,"results":"52","hashOfConfig":"49"},{"size":6057,"mtime":1587042688987,"results":"53","hashOfConfig":"49"},{"size":6034,"mtime":1587042688987,"results":"54","hashOfConfig":"49"},{"size":1438,"mtime":1587042614674,"results":"55","hashOfConfig":"49"},{"size":2235,"mtime":1587042614674,"results":"56","hashOfConfig":"49"},{"size":1391,"mtime":1587042614674,"results":"57","hashOfConfig":"49"},{"size":9804,"mtime":1587042688987,"results":"58","hashOfConfig":"49"},{"size":2391,"mtime":1587042614674,"results":"59","hashOfConfig":"49"},{"size":3257,"mtime":1587042688987,"results":"60","hashOfConfig":"49"},{"size":1534,"mtime":1587042614674,"results":"61","hashOfConfig":"49"},{"size":4657,"mtime":1587478132427,"results":"62","hashOfConfig":"49"},{"size":1048,"mtime":1587478132427,"results":"63","hashOfConfig":"49"},{"size":4436,"mtime":1587042614674,"results":"64","hashOfConfig":"49"},{"size":575,"mtime":1587042614674,"results":"65","hashOfConfig":"49"},{"size":334,"mtime":1587042614674,"results":"66","hashOfConfig":"49"},{"size":3119,"mtime":1587042614674,"results":"67","hashOfConfig":"49"},{"size":2937,"mtime":1587042614674,"results":"68","hashOfConfig":"49"},{"size":1587,"mtime":1587042688987,"results":"69","hashOfConfig":"49"},{"size":1348,"mtime":1587042614674,"results":"70","hashOfConfig":"49"},{"size":6698,"mtime":1587042688987,"results":"71","hashOfConfig":"49"},{"size":5885,"mtime":1587042688987,"results":"72","hashOfConfig":"49"},{"size":3492,"mtime":1587042688987,"results":"73","hashOfConfig":"49"},{"size":17949,"mtime":1587042688987,"results":"74","hashOfConfig":"49"},{"size":5481,"mtime":1587042688987,"results":"75","hashOfConfig":"49"},{"size":2984,"mtime":1587042614674,"results":"76","hashOfConfig":"49"},{"size":4290,"mtime":1587042688987,"results":"77","hashOfConfig":"49"},{"size":2078,"mtime":1587042688987,"results":"78","hashOfConfig":"49"},{"size":22342,"mtime":1587042688987,"results":"79","hashOfConfig":"49"},{"size":14636,"mtime":1587478132427,"results":"80","hashOfConfig":"49"},{"size":6046,"mtime":1587042688987,"results":"81","hashOfConfig":"49"},{"size":7972,"mtime":1587561414006,"results":"82","hashOfConfig":"49"},{"size":13653,"mtime":1587486489456,"results":"83","hashOfConfig":"49"},{"size":12816,"mtime":1587042688987,"results":"84","hashOfConfig":"49"},{"size":6391,"mtime":1587042614674,"results":"85","hashOfConfig":"49"},{"size":1935,"mtime":1587042614674,"results":"86","hashOfConfig":"49"},{"size":19547,"mtime":1587478132431,"results":"87","hashOfConfig":"49"},{"size":7263,"mtime":1587042688987,"results":"88","hashOfConfig":"49"},{"size":1853,"mtime":1587042688987,"results":"89","hashOfConfig":"49"},{"size":6820,"mtime":1587042688987,"results":"90","hashOfConfig":"49"},{"size":1026,"mtime":1587042614646,"results":"91","hashOfConfig":"49"},{"size":658,"mtime":1587042614646,"results":"92","hashOfConfig":"49"},{"size":2105,"mtime":1587042614646,"results":"93","hashOfConfig":"49"},{"size":2973,"mtime":1587042614646,"results":"94","hashOfConfig":"49"},{"size":7200,"mtime":1587042614646,"results":"95","hashOfConfig":"49"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"hdedvy",{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"162","messages":"163","errorCount":42,"warningCount":0,"fixableErrorCount":41,"fixableWarningCount":0,"source":"164"},{"filePath":"165","messages":"166","errorCount":18,"warningCount":0,"fixableErrorCount":17,"fixableWarningCount":0,"source":"167"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/tahira/Public/mapswipe/src/shared/ConnectionManager.js",[],"/home/tahira/Public/mapswipe/src/shared/Database.js",[],"/home/tahira/Public/mapswipe/src/shared/Globals.js",[],"/home/tahira/Public/mapswipe/src/shared/Levels.js",[],"/home/tahira/Public/mapswipe/src/shared/Main.js",[],"/home/tahira/Public/mapswipe/src/shared/actions/index.js",[],"/home/tahira/Public/mapswipe/src/shared/common/BottomProgress.js",[],"/home/tahira/Public/mapswipe/src/shared/common/ConfirmationModal.js",[],"/home/tahira/Public/mapswipe/src/shared/common/ProfileConversion.js",[],"/home/tahira/Public/mapswipe/src/shared/common/ProjectLevelScreen.js",[],"/home/tahira/Public/mapswipe/src/shared/common/SatImage.js",[],"/home/tahira/Public/mapswipe/src/shared/common/ScaleBar.js",[],"/home/tahira/Public/mapswipe/src/shared/common/Tutorial/index.js",[],"/home/tahira/Public/mapswipe/src/shared/common/firebaseFunctions.js",[],"/home/tahira/Public/mapswipe/src/shared/constants.js",[],"/home/tahira/Public/mapswipe/src/shared/flow-types.js",[],"/home/tahira/Public/mapswipe/src/shared/i18n.js",[],"/home/tahira/Public/mapswipe/src/shared/reducers/index.js",[],"/home/tahira/Public/mapswipe/src/shared/reducers/results.js",[],"/home/tahira/Public/mapswipe/src/shared/reducers/ui.js",[],"/home/tahira/Public/mapswipe/src/shared/store.js",[],"/home/tahira/Public/mapswipe/src/shared/views/AppLoadingScreen.js",[],"/home/tahira/Public/mapswipe/src/shared/views/BuildingFootprint/FootprintDisplay.js",[],"/home/tahira/Public/mapswipe/src/shared/views/BuildingFootprint/Validator.js",[],"/home/tahira/Public/mapswipe/src/shared/views/BuildingFootprint/index.js",[],"/home/tahira/Public/mapswipe/src/shared/views/ChangeDetection/ChangeDetector.js",[],"/home/tahira/Public/mapswipe/src/shared/views/ChangeDetection/index.js",[],"/home/tahira/Public/mapswipe/src/shared/views/Header.js",[],"/home/tahira/Public/mapswipe/src/shared/views/LoadMore.js",[],"/home/tahira/Public/mapswipe/src/shared/views/LoadingIcon.js",[],"/home/tahira/Public/mapswipe/src/shared/views/Login.js",[],"/home/tahira/Public/mapswipe/src/shared/views/Mapper/CardBody.js",[],"/home/tahira/Public/mapswipe/src/shared/views/Mapper/IndividualCard.js",[],"/home/tahira/Public/mapswipe/src/shared/views/Mapper/Tile.js",["192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233"],"import * as React from 'react';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport { firebaseConnect } from 'react-redux-firebase';\nimport {\n    ImageBackground,\n    View,\n    StyleSheet,\n    TouchableHighlight,\n} from 'react-native';\nimport * as Animatable from 'react-native-animatable';\nimport { toggleMapTile } from '../../actions/index';\nimport {\n    COLOR_DARK_GRAY,\n    COLOR_DEEP_BLUE,\n    COLOR_GREEN,\n    COLOR_RED,\n    COLOR_TRANSPARENT,\n    COLOR_YELLOW,\n} from '../../constants';\nimport type {\n    Mapper,\n    ResultType,\n    BuiltAreaTaskType,\n} from '../../flow-types';\n\nconst GLOBAL = require('../../Globals');\n\nconst styles = StyleSheet.create({\n    animatedText: {\n        fontWeight: '900',\n        fontSize: 20,\n        color: '#BBF1FF',\n        textAlign: 'center',\n        marginTop: 50,\n        backgroundColor: COLOR_TRANSPARENT,\n    },\n    emptyTile: {\n        height: GLOBAL.TILE_SIZE,\n        width: GLOBAL.TILE_SIZE,\n        backgroundColor: COLOR_DEEP_BLUE,\n        borderWidth: 0.5,\n        borderTopWidth: 0.5,\n        borderColor: COLOR_DARK_GRAY,\n    },\n    tileStyle: {\n        height: GLOBAL.TILE_SIZE,\n        width: GLOBAL.TILE_SIZE,\n        borderWidth: 0.5,\n        borderColor: 'rgba(255, 255, 255, 0.2)',\n    },\n    tileOverlay: {\n        height: GLOBAL.TILE_SIZE,\n        opacity: 0.2,\n        width: GLOBAL.TILE_SIZE,\n    },\n    buildingStyle: {\n        height: GLOBAL.TILE_SIZE,\n        width: GLOBAL.TILE_SIZE,\n        borderWidth: 0.5,\n        borderColor: 'rgba(255, 255, 255, 0.2)',\n        opacity: 0.7,\n\n    },\n});\n\ntype Props = {\n    tile: BuiltAreaTaskType,\n    mapper: Mapper,\n    onToggleTile: ResultType => void,\n    results: number,\n    tutorial: boolean,\n};\n\nexport class _Tile extends React.Component<Props> {\n    tileStatus: number;\n\n    lastReportedStatus: number;\n\n    constructor(props: Props) {\n        super(props);\n        this.tileStatus = 0;\n        this.lastReportedStatus = -1;\n    }\n\n    shouldComponentUpdate(nextProps: Props) {\n        const { results } = this.props;\n        return (results !== nextProps.results);\n    }\n\n    getTileColor = (status: number) => {\n        const colors = [\n            COLOR_TRANSPARENT,\n            COLOR_GREEN,\n            COLOR_YELLOW,\n            COLOR_RED,\n        ];\n        return colors[status];\n    }\n\n    onPressButton = () => {\n        // called when a tile is tapped\n        const {\n            mapper,\n            onToggleTile,\n            results,\n            tile: { taskId, projectId, groupId },\n        } = this.props;\n        mapper.closeTilePopup();\n        // find the tile status from redux results\n        let tileStatus = results;\n        tileStatus = (tileStatus + 1) % 4;\n        onToggleTile({\n            resultId: taskId,\n            result: tileStatus,\n            groupId,\n            projectId,\n        });\n    }\n\n    onDismissZoom = () => {\n        const { mapper } = this.props;\n        mapper.closeTilePopup();\n    }\n\n    onLongPress = () => {\n        const { mapper } = this.props;\n        mapper.openTilePopup(this.zoomRender());\n    }\n\n    /**\n     * Returns the [\"animation\", \"text\", duration] for the fun text displayed when you map a tile!\n     */\n    // eslint-disable-next-line class-methods-use-this\n    getFunText() {\n        const texts = [\n            ['bounceIn', 'Great Job!', '1000'],\n            ['bounceIn', 'With every tap you help put a family on the map', '3000'],\n            ['bounceIn', 'Thank you!', '1000'],\n            ['bounceIn', 'Your effort is helping!', '1000'],\n            ['bounceIn', 'Keep up the good work!', '1000'],\n        ];\n\n        const random = Math.floor(Math.random() * texts.length);\n        return texts[random];\n    }\n\n    getImgSource = () => {\n        const { tile } = this.props;\n        return { uri: tile.url };\n    }\n\n    getOsmBuildingsUrl = () => {\n        const { tile } = this.props;\n        return { uri: tile.urlB };\n    }\n\n    zoomRender = () => {\n        const imageSource = this.getImgSource();\n        const osmBuildingsImageSource = this.getOsmBuildingsUrl();\n        return (\n            <TouchableHighlight onPress={this.onDismissZoom}>\n                <ImageBackground\n                    style={{\n                        height: 300,\n                        width: 300,\n                        borderWidth: 0.5,\n                        borderColor: 'rgba(255,255,255,0.2)',\n                    }}\n                    source={imageSource}\n                >\n                <ImageBackground style={{\n                        height: 300,\n                        width: 300,\n                        borderWidth: 0.5,\n                        borderColor: 'rgba(255,255,255,0.2)',\n                        opacity: 0.7,\n                    }} source={osmBuildingsImageSource}></ImageBackground> \n\n                </ImageBackground>\n            </TouchableHighlight>\n        );\n    }\n\n    render() {\n        const { results, tile: { taskId }, tutorial } = this.props;\n        const tileStatus = results;\n        const overlayColor = this.getTileColor(tileStatus);\n        const animatedRows = [];\n        const showAnim = Math.floor(Math.random() * 5);\n\n        if (tileStatus > 1 && showAnim === 1 && !tutorial) {\n            animatedRows.push(\n                <Animatable.Text\n                    key={`anim-${taskId}`}\n                    animation={this.getFunText()[0]}\n                    style={styles.animatedText}\n                >\n                    {this.getFunText()[1]}\n                </Animatable.Text>,\n            );\n        }\n        const imageSource = this.getImgSource();\n        let comp;\n\n        if (this.getOsmBuildingsUrl() !== undefined) {\n\n            comp = (<ImageBackground style={styles.buildingStyle} source={this.getOsmBuildingsUrl()}>\n                         <View style={[styles.tileOverlay, { backgroundColor: overlayColor }]} key={`view-${taskId}`} >\n                            {animatedRows}              \n                        </View>\n                     </ImageBackground> \n                     )}\n            else {\n            comp = (<View style={[styles.tileOverlay, { backgroundColor: overlayColor }]} key={`view-${taskId}`} >\n                        {animatedRows}              \n                    </View>)\n            }\n\n        return (\n            <TouchableHighlight\n                onPress={this.onPressButton}\n                onLongPress={this.onLongPress}\n                testID=\"tile\"\n            >\n                <ImageBackground\n                    style={styles.tileStyle}\n                    key={`touch-${taskId}`}\n                    source={imageSource}\n                >\n\n                {comp}\n                \n                </ImageBackground>\n            </TouchableHighlight>\n        );\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    // here we plug only the relevant part of the redux state\n    // into the component, this helps limit the rerendering of\n    // Tiles to only the one that was just tapped.\n    let results = 0;\n    const { groupId, projectId, taskId } = ownProps.tile;\n    // we need this ugly if ()... because the first rendering of the screen\n    // happens before initial results have been generated in redux by\n    // generateCards\n    if (state.results[projectId]\n        && state.results[projectId][groupId]\n        && state.results[projectId][groupId][taskId]) {\n        results = state.results[projectId][groupId][taskId];\n    }\n    return {\n        mapper: ownProps.mapper,\n        results,\n        tile: ownProps.tile,\n        tutorial: ownProps,\n    };\n};\n\nconst mapDispatchToProps = (dispatch) => (\n    {\n        onToggleTile: (tileInfo) => {\n            dispatch(toggleMapTile(tileInfo));\n        },\n    }\n);\n\nexport const Tile = compose(\n    firebaseConnect(() => [\n    ]),\n    connect(\n        mapStateToProps,\n        mapDispatchToProps,\n    ),\n)(_Tile);\nexport const EmptyTile = () => (<View style={styles.emptyTile} />);\n","/home/tahira/Public/mapswipe/src/shared/views/Mapper/index.js",["234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251"],"// @flow\n/* eslint-disable max-classes-per-file */\nimport * as React from 'react';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport {\n    BackHandler,\n    Text,\n    View,\n    StyleSheet,\n    Image,\n} from 'react-native';\nimport Button from 'apsl-react-native-button';\nimport { cancelGroup, seenHelpBoxType1, startGroup } from '../../actions';\nimport {\n    firebaseConnectGroup,\n    mapStateToPropsForGroups,\n} from '../../common/firebaseFunctions';\nimport Header from '../Header';\nimport CardBody from './CardBody';\nimport BottomProgress from '../../common/BottomProgress';\nimport LoadingIcon from '../LoadingIcon';\nimport type {\n    BuiltAreaGroupType,\n    CategoriesType,\n    NavigationProp,\n    SingleImageryProjectType,\n} from '../../flow-types';\nimport {\n    COLOR_DEEP_BLUE,\n    COMPLETENESS_PROJECT,\n    LEGACY_TILES,\n} from '../../constants';\n\nconst Modal = require('react-native-modalbox');\nconst GLOBAL = require('../../Globals');\n\nconst styles = StyleSheet.create({\n    startButton: {\n        backgroundColor: COLOR_DEEP_BLUE,\n        alignItems: 'center',\n        height: 50,\n        padding: 12,\n        borderRadius: 5,\n        borderWidth: 0.1,\n        position: 'absolute',\n        bottom: 20,\n        left: 20,\n        width: 260,\n    },\n    header: {\n        fontWeight: '700',\n        color: '#212121',\n        fontSize: 18,\n        marginTop: 5,\n    },\n    tutRow: {\n        marginTop: 15,\n        flexDirection: 'row',\n        justifyContent: 'flex-start',\n        alignItems: 'flex-start',\n    },\n    tutPar: {\n        fontSize: 14,\n        color: 'rgba(0,0,0,0.54)',\n        fontWeight: '500',\n        lineHeight: 20,\n    },\n    tutText: {\n        fontSize: 13,\n        fontWeight: '600',\n        color: '#50acd4',\n        marginTop: 7,\n        marginLeft: 5,\n    },\n    tutImage: {\n        height: 30,\n        resizeMode: 'contain',\n    },\n    tutImage2: {\n        height: 30,\n        resizeMode: 'contain',\n    },\n    modal: {\n        padding: 20,\n    },\n    HelpModal: {\n        height: GLOBAL.SCREEN_HEIGHT < 500 ? GLOBAL.SCREEN_HEIGHT - 50 : 500,\n        width: 300,\n        backgroundColor: '#ffffff',\n        borderRadius: 2,\n    },\n    tilePopup: {\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        height: 300,\n        width: 300,\n        backgroundColor: 'transparent',\n    },\n    mappingContainer: {\n        flex: 1,\n        flexDirection: 'column',\n        backgroundColor: COLOR_DEEP_BLUE,\n        height: GLOBAL.SCREEN_HEIGHT,\n        width: GLOBAL.SCREEN_WIDTH,\n    },\n});\n\ntype Props = {\n    categories: CategoriesType,\n    group: BuiltAreaGroupType,\n    navigation: NavigationProp,\n    onCancelGroup: {} => void,\n    onMarkHelpBoxSeen: void => void,\n    onStartGroup: {} => void,\n    hasSeenHelpBoxType1: boolean,\n    tutorial: boolean,\n    tutorialName: string,\n}\n\ntype State = {\n    poppedUpTile: React.Node,\n}\n\nclass _Mapper extends React.Component<Props, State> {\n    progress: ?BottomProgress;\n\n    project: SingleImageryProjectType;\n\n    tilePopup: ?React.ComponentType<void>;\n\n    HelpModal: ?React.ComponentType<void>;\n\n\n    constructor(props:Props) {\n        super(props);\n        this.project = props.navigation.getParam('project', null);\n        this.state = {\n            poppedUpTile: null,\n        };\n    }\n\n    componentDidMount() {\n        const { hasSeenHelpBoxType1 } = this.props;\n        if (hasSeenHelpBoxType1 === undefined) {\n            this.openHelpModal();\n        }\n        BackHandler.addEventListener('hardwareBackPress', this.handleBackPress);\n    }\n\n    componentDidUpdate(prevProps) {\n        const { group, onStartGroup } = this.props;\n        if (prevProps.group !== undefined && group !== undefined && prevProps.group !== group) {\n            // we just started working on a group, make a note of the time\n            onStartGroup({\n                groupId: group.groupId,\n                projectId: group.projectId,\n                timestamp: GLOBAL.DB.getTimestamp(),\n            });\n        }\n    }\n\n    componentWillUnmount() {\n        BackHandler.removeEventListener('hardwareBackPress', this.handleBackPress);\n    }\n\n    handleBackPress = () => {\n        this.returnToView();\n        return true;\n    }\n\n    openHelpModal = () => {\n        // $FlowFixMe\n        this.HelpModal.open();\n    }\n\n    returnToView = () => {\n        const { group, navigation, onCancelGroup } = this.props;\n        if (group) {\n            onCancelGroup({\n                groupId: group.groupId,\n                projectId: group.projectId,\n            });\n            navigation.pop();\n        }\n    }\n\n    closeHelpModal = () => {\n        const { hasSeenHelpBoxType1, onMarkHelpBoxSeen } = this.props;\n        if (hasSeenHelpBoxType1 === undefined) {\n            onMarkHelpBoxSeen();\n        }\n        // $FlowFixMe\n        this.HelpModal.close();\n    }\n\n    openTilePopup = (tile) => {\n        this.setState({\n            poppedUpTile: tile,\n        });\n        // $FlowFixMe\n        this.tilePopup.open();\n    }\n\n    closeTilePopup = () => {\n        this.setState({\n            poppedUpTile: <View />,\n        });\n        // $FlowFixMe\n        this.tilePopup.close();\n    }\n\n    renderIntroModal(creditString: string) {\n        /* eslint-disable global-require */\n        const { tutorial, tutorialName } = this.props;\n        let content;\n        if (!tutorial) {\n            content = (\n                <>\n                    <Text style={styles.header}>How To Contribute</Text>\n                    <View style={styles.tutRow}>\n                        <Image\n                            source={require('../assets/tap_icon.png')}\n                            style={styles.tutImage}\n                        />\n                        <Text style={styles.tutText}>\n                            TAP TO\n                            SELECT\n                        </Text>\n                    </View>\n                    <Text style={styles.tutPar}>\n                        Look for features listed in your mission brief.\n                        Tap each tile where you find what you&apos;re looking for.\n                        Tap once for&nbsp;\n                        <Text style={{ color: 'rgb(36, 219, 26)' }}>\n                            YES\n                        </Text>\n                        , twice for&nbsp;\n\n                       {tutorialName == 'completeness_tutorial'?\n                       <Text style={{ color: 'rgb(237, 209, 28)' }}>\n                            NOT COMPLETE\n                        </Text>:\n                        <Text style={{ color: 'rgb(237, 209, 28)' }}>\n                            MAYBE\n                        </Text>\n                        }\n                        , and three times for&nbsp;\n                        <Text style={{ color: 'rgb(230, 28, 28)' }}>\n                            BAD IMAGERY (such as clouds)\n                        </Text>\n                        .\n                    </Text>\n                    <View style={styles.tutRow}>\n                        <Image\n                            source={require('../assets/swipeleft_icon.png')}\n                            style={styles.tutImage2}\n                        />\n                        <Text style={styles.tutText}>\n                            SWIPE TO NAVIGATE\n                        </Text>\n                    </View>\n                    <Text style={styles.tutPar}>\n                        When you are done with a piece of the map,\n                        scroll to the next one by swiping.\n                    </Text>\n                    <View style={styles.tutRow}>\n                        <Image\n                            source={require('../assets/tap_icon.png')}\n                            style={styles.tutImage2}\n                        />\n                        <Text style={styles.tutText}>\n                            HOLD TO ZOOM\n                        </Text>\n                    </View>\n                    <Text style={styles.tutPar}>Hold a tile to zoom in on the tile.</Text>\n                    <Text style={styles.header}>Credits</Text>\n                    <Text style={styles.tutPar}>{creditString}</Text>\n                </>\n            );\n        } else {\n            content = (\n                <View>\n                    <Text style={styles.tutPar}>\n                        Welcome to the tutorial!\n                    </Text>\n                    <View style={styles.tutRow}>\n                        <Text style={styles.tutPar}>\n                            This should make you a wizard of MapSwipe\n                            in a few minutes.\n                        </Text>\n                    </View>\n                    <View style={styles.tutRow}>\n                        <Text style={styles.tutPar}>\n                            Just follow the instructions on the screen,\n                            and swipe left to continue.\n                        </Text>\n                    </View>\n                    <View style={styles.tutRow}>\n                        <Text style={styles.tutPar}>\n                            If the instructions are in your way,\n                            just tap the message box to move it.\n                        </Text>\n                    </View>\n                </View>\n            );\n        }\n\n        return (\n            <Modal\n                style={[styles.modal, styles.HelpModal]}\n                backdropType=\"blur\"\n                position=\"center\"\n                ref={(r) => { this.HelpModal = r; }}\n            >\n                {content}\n                <Button\n                    style={styles.startButton}\n                    onPress={this.closeHelpModal}\n                    testID=\"closeIntroModalBoxButton\"\n                    textStyle={{ fontSize: 13, color: '#ffffff', fontWeight: '700' }}\n                >\n                    I understand\n                </Button>\n            </Modal>\n        );\n        /* eslint-enable global-require */\n    }\n\n    render() {\n        const {\n            categories,\n            group,\n            navigation,\n            tutorial,\n            tutorialName,\n        } = this.props;\n        const { poppedUpTile } = this.state;\n        let comp;\n        // only show the mapping component once we have downloaded the group data\n        if (group) {\n            comp = (\n                <CardBody\n                    categories={tutorial ? categories : null}\n                    group={group}\n                    mapper={this}\n                    navigation={navigation}\n                    projectId={group.projectId}\n                    tutorial={tutorial}\n                    tutorialName={tutorialName}\n                    zoomLevel={this.project.zoomLevel}\n                />\n            );\n        } else {\n            comp = <LoadingIcon />;\n        }\n        // $FlowFixMe\n        const creditString = this.project.tileServer.credits || 'Unknown imagery source';\n        const introModal = this.renderIntroModal(creditString);\n\n        return (\n            <View style={styles.mappingContainer}>\n                <Header\n                    lookFor={this.project.lookFor}\n                    onBackPress={this.returnToView}\n                    onInfoPress={this.openHelpModal}\n                />\n\n                {comp}\n\n                <BottomProgress ref={(r) => { this.progress = r; }} />\n                {introModal}\n                <Modal\n                    style={styles.tilePopup}\n                    entry=\"bottom\"\n                    position=\"center\"\n                    ref={(r) => { this.tilePopup = r; }}\n                >\n                    {poppedUpTile}\n                </Modal>\n            </View>\n        );\n    }\n    /* eslint-enable global-require */\n}\n\nconst mapDispatchToProps = (dispatch) => (\n    {\n        onCancelGroup(groupDetails) {\n            dispatch(cancelGroup(groupDetails));\n        },\n        onMarkHelpBoxSeen() {\n            dispatch(seenHelpBoxType1());\n        },\n        onStartGroup(groupDetails) {\n            dispatch(startGroup(groupDetails));\n        },\n    }\n);\n\nconst Mapper = compose(\n    firebaseConnectGroup(),\n    connect(\n        (state) => ({ hasSeenHelpBoxType1: state.ui.user.hasSeenHelpBoxType1 }),\n    ),\n    connect(\n        mapStateToPropsForGroups(),\n        mapDispatchToProps,\n    ),\n)(_Mapper);\n\n// eslint-disable-next-line react/no-multi-comp\nexport default class MapperScreen extends React.Component<Props> {\n    randomSeed: number;\n\n    constructor(props: Props) {\n        super(props);\n        this.randomSeed = Math.random();\n    }\n\n    render() {\n        const { ...otherProps } = this.props;\n        const projectObj = otherProps.navigation.getParam('project', false);\n        // check if the project data has a custom tutorialName set (in firebase)\n        // in which case, we use it as the tutorial, or fallback onto the default\n        // tutorial content based on the project type\n        let tutorialName;\n        if (projectObj.tutorialName !== undefined) {\n            tutorialName = projectObj.tutorialName;\n        } else {\n            switch (projectObj.projectType) {\n            case LEGACY_TILES:\n                tutorialName = 'build_area_tutorial';\n                break;\n            case COMPLETENESS_PROJECT:\n                tutorialName = 'completeness_tutorial';\n                break;\n            default:\n                console.log('Project type not supported');\n            }\n        }\n        return (\n            <Mapper\n                randomSeed={this.randomSeed}\n                tutorialName={tutorialName}\n                {...otherProps}\n            />\n        );\n    }\n}\n","/home/tahira/Public/mapswipe/src/shared/views/MoreOptions.js",[],"/home/tahira/Public/mapswipe/src/shared/views/ProjectCard.js",[],"/home/tahira/Public/mapswipe/src/shared/views/ProjectNav.js",[],"/home/tahira/Public/mapswipe/src/shared/views/ProjectView.js",[],"/home/tahira/Public/mapswipe/src/shared/views/RecommendedCards.js",[],"/home/tahira/Public/mapswipe/src/shared/views/WebviewWindow.js",[],"/home/tahira/Public/mapswipe/src/shared/views/Welcome.js",[],"/home/tahira/Public/mapswipe/__tests__/common/Database.js",[],"/home/tahira/Public/mapswipe/__tests__/common/Login.js",[],"/home/tahira/Public/mapswipe/__tests__/common/RecommendedCards.js",[],"/home/tahira/Public/mapswipe/__tests__/common/reducers.js",[],"/home/tahira/Public/mapswipe/__tests__/fixtures/projects.js",[],{"ruleId":"252","severity":2,"message":"253","line":172,"column":1,"nodeType":"254","messageId":"255","endLine":172,"endColumn":17,"fix":"256"},{"ruleId":"257","severity":2,"message":"258","line":172,"column":17,"nodeType":"259","endLine":178,"endColumn":57,"fix":"260"},{"ruleId":"261","severity":2,"message":"262","line":172,"column":17,"nodeType":"259","endLine":178,"endColumn":57,"fix":"263"},{"ruleId":"264","severity":2,"message":"265","line":172,"column":34,"nodeType":"266","endLine":178,"endColumn":23,"fix":"267"},{"ruleId":"268","severity":2,"message":"269","line":178,"column":24,"nodeType":"266","endLine":178,"endColumn":56,"fix":"270"},{"ruleId":"271","severity":2,"message":"272","line":178,"column":56,"nodeType":"259","fix":"273"},{"ruleId":"274","severity":2,"message":"275","line":178,"column":57,"nodeType":"276","endLine":178,"endColumn":75,"fix":"277"},{"ruleId":"278","severity":2,"message":"279","line":178,"column":75,"nodeType":"280","endLine":178,"endColumn":76,"fix":"281"},{"ruleId":"282","severity":2,"message":"283","line":206,"column":54,"nodeType":"284","fix":"285"},{"ruleId":"286","severity":2,"message":"287","line":208,"column":1,"nodeType":"280","messageId":"288"},{"ruleId":"289","severity":2,"message":"290","line":208,"column":21,"nodeType":"291","endLine":212,"endColumn":40,"fix":"292"},{"ruleId":"252","severity":2,"message":"293","line":209,"column":1,"nodeType":"254","messageId":"255","endLine":209,"endColumn":26,"fix":"294"},{"ruleId":"261","severity":2,"message":"295","line":209,"column":26,"nodeType":"259","endLine":209,"endColumn":120,"fix":"296"},{"ruleId":"297","severity":2,"message":"298","line":209,"column":118,"nodeType":"259","endLine":209,"endColumn":119,"fix":"299"},{"ruleId":"252","severity":2,"message":"300","line":210,"column":1,"nodeType":"254","messageId":"255","endLine":210,"endColumn":29,"fix":"301"},{"ruleId":"261","severity":2,"message":"302","line":210,"column":29,"nodeType":"303","endLine":210,"endColumn":43,"fix":"304"},{"ruleId":"278","severity":2,"message":"279","line":210,"column":43,"nodeType":"280","endLine":210,"endColumn":57,"fix":"305"},{"ruleId":"252","severity":2,"message":"306","line":211,"column":1,"nodeType":"254","messageId":"255","endLine":211,"endColumn":25,"fix":"307"},{"ruleId":"261","severity":2,"message":"308","line":211,"column":25,"nodeType":"276","endLine":211,"endColumn":32,"fix":"309"},{"ruleId":"274","severity":2,"message":"310","line":211,"column":25,"nodeType":"276","endLine":211,"endColumn":32,"fix":"311"},{"ruleId":"252","severity":2,"message":"312","line":212,"column":1,"nodeType":"254","messageId":"255","endLine":212,"endColumn":22,"fix":"313"},{"ruleId":"261","severity":2,"message":"314","line":212,"column":22,"nodeType":"276","endLine":212,"endColumn":40,"fix":"315"},{"ruleId":"274","severity":2,"message":"310","line":212,"column":22,"nodeType":"276","endLine":212,"endColumn":40,"fix":"316"},{"ruleId":"278","severity":2,"message":"279","line":212,"column":40,"nodeType":"280","endLine":212,"endColumn":41,"fix":"317"},{"ruleId":"252","severity":2,"message":"312","line":213,"column":1,"nodeType":"254","messageId":"255","endLine":213,"endColumn":22,"fix":"318"},{"ruleId":"319","severity":2,"message":"320","line":213,"column":23,"nodeType":"321","endLine":213,"endColumn":24,"fix":"322"},{"ruleId":"323","severity":2,"message":"324","line":213,"column":23,"nodeType":"284","messageId":"325","fix":"326"},{"ruleId":"327","severity":2,"message":"328","line":213,"column":23,"nodeType":"254","messageId":"329","endLine":213,"endColumn":24,"fix":"330"},{"ruleId":"327","severity":2,"message":"331","line":213,"column":23,"nodeType":"254","messageId":"332","endLine":213,"endColumn":24,"fix":"333"},{"ruleId":"252","severity":2,"message":"334","line":214,"column":1,"nodeType":"335","messageId":"255","endLine":214,"endColumn":13,"fix":"336"},{"ruleId":"289","severity":2,"message":"290","line":215,"column":21,"nodeType":"291","endLine":217,"endColumn":28,"fix":"337"},{"ruleId":"297","severity":2,"message":"298","line":215,"column":113,"nodeType":"259","endLine":215,"endColumn":114,"fix":"338"},{"ruleId":"252","severity":2,"message":"306","line":216,"column":1,"nodeType":"254","messageId":"255","endLine":216,"endColumn":25,"fix":"339"},{"ruleId":"261","severity":2,"message":"340","line":216,"column":25,"nodeType":"303","endLine":216,"endColumn":39,"fix":"341"},{"ruleId":"278","severity":2,"message":"279","line":216,"column":39,"nodeType":"280","endLine":216,"endColumn":53,"fix":"342"},{"ruleId":"252","severity":2,"message":"343","line":217,"column":1,"nodeType":"254","messageId":"255","endLine":217,"endColumn":21,"fix":"344"},{"ruleId":"261","severity":2,"message":"345","line":217,"column":21,"nodeType":"276","endLine":217,"endColumn":28,"fix":"346"},{"ruleId":"319","severity":2,"message":"320","line":217,"column":29,"nodeType":"321","endLine":218,"endColumn":1,"fix":"347"},{"ruleId":"252","severity":2,"message":"334","line":218,"column":1,"nodeType":"254","messageId":"255","endLine":218,"endColumn":13,"fix":"348"},{"ruleId":"252","severity":2,"message":"253","line":232,"column":1,"nodeType":"254","messageId":"255","endLine":232,"endColumn":17,"fix":"349"},{"ruleId":"261","severity":2,"message":"262","line":232,"column":17,"nodeType":"303","endLine":232,"endColumn":23,"fix":"350"},{"ruleId":"278","severity":2,"message":"279","line":233,"column":1,"nodeType":"280","endLine":233,"endColumn":17,"fix":"351"},{"ruleId":"252","severity":2,"message":"352","line":241,"column":1,"nodeType":"254","messageId":"255","endLine":241,"endColumn":24,"fix":"353"},{"ruleId":"261","severity":2,"message":"354","line":241,"column":24,"nodeType":"303","endLine":248,"endColumn":26,"fix":"355"},{"ruleId":"356","severity":2,"message":"357","line":241,"column":38,"nodeType":"358","messageId":"359","endLine":241,"endColumn":40},{"ruleId":"360","severity":2,"message":"361","line":241,"column":64,"nodeType":"362","endLine":241,"endColumn":65,"fix":"363"},{"ruleId":"364","severity":2,"message":"365","line":241,"column":65,"nodeType":"362","fix":"366"},{"ruleId":"252","severity":2,"message":"367","line":242,"column":1,"nodeType":"254","messageId":"255","endLine":242,"endColumn":24,"fix":"368"},{"ruleId":"261","severity":2,"message":"369","line":242,"column":24,"nodeType":"259","endLine":242,"endColumn":69,"fix":"370"},{"ruleId":"289","severity":2,"message":"371","line":242,"column":24,"nodeType":"291","endLine":244,"endColumn":32,"fix":"372"},{"ruleId":"261","severity":2,"message":"373","line":242,"column":69,"nodeType":"374","endLine":244,"endColumn":25,"fix":"375"},{"ruleId":"252","severity":2,"message":"376","line":244,"column":1,"nodeType":"254","messageId":"255","endLine":244,"endColumn":25,"fix":"377"},{"ruleId":"274","severity":2,"message":"310","line":244,"column":25,"nodeType":"276","endLine":244,"endColumn":32,"fix":"378"},{"ruleId":"261","severity":2,"message":"379","line":244,"column":25,"nodeType":"276","endLine":244,"endColumn":32,"fix":"380"},{"ruleId":"364","severity":2,"message":"381","line":244,"column":33,"nodeType":"362","fix":"382"},{"ruleId":"252","severity":2,"message":"376","line":245,"column":1,"nodeType":"254","messageId":"255","endLine":245,"endColumn":25,"fix":"383"},{"ruleId":"261","severity":2,"message":"379","line":245,"column":25,"nodeType":"259","endLine":245,"endColumn":70,"fix":"384"},{"ruleId":"289","severity":2,"message":"371","line":245,"column":25,"nodeType":"291","endLine":247,"endColumn":32,"fix":"385"},{"ruleId":"252","severity":2,"message":"376","line":247,"column":1,"nodeType":"254","messageId":"255","endLine":247,"endColumn":25,"fix":"386"},{"ruleId":"387","severity":2,"message":"388","line":248,"column":25,"nodeType":"254","messageId":"389","endLine":248,"endColumn":26,"fix":"390"},"indent","Expected indentation of 20 spaces but found 16.","Punctuator","wrongIndentation",{"range":"391","text":"392"},"react/self-closing-comp","Empty components are self-closing","JSXOpeningElement",{"range":"393","text":"394"},"react/jsx-indent","Expected indentation of 20 space characters but found 16.",{"range":"395","text":"392"},"react/jsx-first-prop-new-line","Property should be placed on a new line","JSXAttribute",{"range":"396","text":"397"},"react/jsx-max-props-per-line","Prop `source` must be placed on a new line",{"range":"398","text":"399"},"react/jsx-closing-bracket-location","The closing bracket must be aligned with the line containing the opening tag (expected column 17 on the next line)",{"range":"400","text":"401"},"react/jsx-closing-tag-location","Closing tag of a multiline JSX expression must be on its own line.","JSXClosingElement",{"range":"402","text":"403"},"no-trailing-spaces","Trailing spaces not allowed.","Program",{"range":"404","text":"405"},"padded-blocks","Block must not be padded by blank lines.","BlockStatement",{"range":"406","text":"397"},"max-len","This line has a length of 101. Maximum allowed is 100.","max","react/jsx-wrap-multilines","Parentheses around JSX should be on separate lines","JSXElement",{"range":"407","text":"408"},"Expected indentation of 16 spaces but found 25.",{"range":"409","text":"410"},"Expected indentation of 16 space characters but found 25.",{"range":"411","text":"410"},"react/jsx-tag-spacing","A space is forbidden before closing bracket",{"range":"412","text":"405"},"Expected indentation of 20 spaces but found 28.",{"range":"413","text":"392"},"Expected indentation of 29 space characters but found 28.","JSXExpressionContainer",{"range":"414","text":"415"},{"range":"416","text":"405"},"Expected indentation of 16 spaces but found 24.",{"range":"417","text":"410"},"Expected indentation of 25 space characters but found 24.",{"range":"418","text":"419"},"Expected closing tag to match indentation of opening.",{"range":"420","text":"419"},"Expected indentation of 12 spaces but found 21.",{"range":"421","text":"422"},"Expected indentation of 12 space characters but found 21.",{"range":"423","text":"422"},{"range":"424","text":"392"},{"range":"425","text":"405"},{"range":"426","text":"422"},"semi","Missing semicolon.","ExpressionStatement",{"range":"427","text":"428"},"block-spacing","Requires a space before '}'.","missing",{"range":"429","text":"430"},"brace-style","Closing curly brace does not appear on the same line as the subsequent block.","nextLineClose",{"range":"431","text":"430"},"Closing curly brace should be on the same line as opening curly brace or on the line after the previous block.","singleLineClose",{"range":"432","text":"397"},"Expected indentation of 8 spaces but found 12.","Keyword",{"range":"433","text":"434"},{"range":"435","text":"436"},{"range":"437","text":"405"},{"range":"438","text":"410"},"Expected indentation of 16 space characters but found 24.",{"range":"439","text":"410"},{"range":"440","text":"405"},"Expected indentation of 12 spaces but found 20.",{"range":"441","text":"422"},"Expected indentation of 12 space characters but found 20.",{"range":"442","text":"422"},{"range":"443","text":"428"},{"range":"444","text":"434"},{"range":"445","text":"392"},{"range":"446","text":"392"},{"range":"447","text":"405"},"Expected indentation of 24 spaces but found 23.",{"range":"448","text":"449"},"Expected indentation of 24 space characters but found 23.",{"range":"450","text":"449"},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","space-infix-ops","Operator '?' must be spaced.","ConditionalExpression",{"range":"451","text":"452"},"operator-linebreak","'?' should be placed at the beginning of the line.",{"range":"453","text":"454"},"Expected indentation of 28 spaces but found 23.",{"range":"455","text":"456"},"Expected indentation of 27 space characters but found 23.",{"range":"457","text":"458"},"Missing parentheses around multilines JSX",{"range":"459","text":"460"},"Expected indentation of 27 space characters but found 28.","Literal",{"range":"461","text":"462"},"Expected indentation of 28 spaces but found 24.",{"range":"463","text":"456"},{"range":"464","text":"465"},"Expected indentation of 23 space characters but found 24.",{"range":"466","text":"465"},"':' should be placed at the beginning of the line.",{"range":"467","text":"468"},{"range":"469","text":"456"},{"range":"470","text":"465"},{"range":"471","text":"472"},{"range":"473","text":"456"},"react/jsx-curly-newline","Unexpected newline before '{'.","unexpectedBefore",{"range":"474","text":"405"},[4492,4508],"                    ",[4804,4823]," />",[4492,4508],[4524,4525],"\n",[4525,4804],"style={{\n                        height: 300,\n                        width: 300,\n                        borderWidth: 0.5,\n                        borderColor: 'rgba(255,255,255,0.2)',\n                        opacity: 0.7,\n                    }}\nsource={osmBuildingsImageSource}",[4804,4805],"\n                >",[4805,4805],"\n                ",[4823,4824],"",[5695,5697],[5717,6047],"\n<ImageBackground style={styles.buildingStyle} source={this.getOsmBuildingsUrl()}>\n                         <View style={[styles.tileOverlay, { backgroundColor: overlayColor }]} key={`view-${taskId}`} >\n                            {animatedRows}              \n                        </View>\n                     </ImageBackground>",[5799,5824],"                ",[5799,5824],[5916,5917],[5919,5947],[5919,5947],"                             ",[5961,5975],[5976,6000],[5976,6000],"                         ",[5976,6000],[6008,6029],"            ",[6008,6029],[6008,6029],[6047,6048],[6049,6070],[6071,6071],";",[6071,6071]," ",[6072,6085],[6071,6071],[6073,6085],"        ",[6112,6287],"\n<View style={[styles.tileOverlay, { backgroundColor: overlayColor }]} key={`view-${taskId}`} >\n                        {animatedRows}              \n                    </View>\n",[6204,6205],[6207,6231],[6207,6231],[6245,6259],[6260,6280],[6260,6280],[6288,6288],[6289,6301],[6671,6687],[6671,6687],[6694,6710],[6330,6353],"                        ",[6330,6353],[6393,6394]," ?",[6393,6418],"\n                       ?",[6395,6418],"                            ",[6395,6418],"                           ",[6393,6536],"? (\n                       <Text style={{ color: 'rgb(237, 209, 28)' }}>\n                            NOT COMPLETE\n                        </Text>\n                     )",[6463,6529],"\n                           NOT COMPLETE\n                        ",[6505,6529],[6505,6529],"                       ",[6505,6529],[6536,6562],"\n                        :",[6538,6562],[6538,6562],[6536,6698],": (\n                        <Text style={{ color: 'rgb(237, 209, 28)' }}>\n                            MAYBE\n                        </Text>\n                      )",[6642,6666],[6673,6698]]